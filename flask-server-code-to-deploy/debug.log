

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}, 'counts': {'real?': 13, 'int?': -1}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}, 'counts': {'real?': 13, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5C10>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5CF0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5BA0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9955190>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99555F0>, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9955120>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976B30>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976C10>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99766D0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976C80>, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976820>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976D60>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99762E0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99767B0>}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4C98BF850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE50>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA59ED90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3228B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA322BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA3D1040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1220>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C98D9940>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C99022C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C92AA9C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C993C980>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C99DE300>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x000001B4C999C6A0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C99DE440>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C99DEF80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C99DEF80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE50>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA59ED90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF70>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE50>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA59ED90>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EE80>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEB0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF40>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA59EF70>}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01234327312120723, 'annualized_rate_of_return': 0.06531374439936699}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5CF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591439073482, 'annualized_rate_of_return': 0.11828607189675866}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C98B5BA0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.00318465129021481, 'annualized_rate_of_return': 0.03069348897802482}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9955190>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599220811467538, 'annualized_rate_of_return': 0.04439234188173735}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99555F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C998C9C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C9AEA200>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x000001B4C99D6D30>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C9AEA700>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C9AEAE40>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C9AEAE40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3228B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA322BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322BE0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322D60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3228B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA322BB0>, 'yearlyContributionGreaterThanEqualZero': True, 'legalYearlyLimitsOnContributionSatisfied': True, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA322BE0>], 'yearlyContributionWithInBudget': True}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.012343266542533125, 'annualized_rate_of_return': 0.06531379442098206}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959711111292, 'annualized_rate_of_return': 0.1182861481718156}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99762E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846444889386026, 'annualized_rate_of_return': 0.03069346081131541}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99767B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599222131955546, 'annualized_rate_of_return': 0.04439231825439216}}, 'total_yearly_investment_contributions_to_account': 700, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4C98D9640>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4CA02FA00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x000001B4C99D6EE0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4CA02F480>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4CA02F100>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B4CA02F100>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA3D1040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1220>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D10D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B4CA3D1040>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D11F0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B4CA3D1220>}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9955120>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01234326213724482, 'annualized_rate_of_return': 0.06531377271699257}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976B30>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592252614557, 'annualized_rate_of_return': 0.1182860444069671}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184642458550152, 'annualized_rate_of_return': 0.030693574295346027}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C99766D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224313385373, 'annualized_rate_of_return': 0.0443922762099378}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B4C9976C80>, 'legal_limits_on_C_for_year_range': 3800}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k", "HSA"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 0}}, "Voo": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}, "VXUS": {"weight": {"dgalType": "real?", "index": 3}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 4}, "current_balance_investment_account": 2000}}, "HSA": {"account_information": {"account_type": "HSA", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 5}}, "Voo": {"weight": {"dgalType": "real?", "index": 6}}, "BND": {"weight": {"dgalType": "real?", "index": 7}}, "VXUS": {"weight": {"dgalType": "real?", "index": 8}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 9}, "current_balance_investment_account": 3000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 10}}, "Voo": {"weight": {"dgalType": "real?", "index": 11}}, "BND": {"weight": {"dgalType": "real?", "index": 12}}, "VXUS": {"weight": {"dgalType": "real?", "index": 13}}}, "total_yearly_investment_contribution": 700, "current_balance_investment_account": 4000}}}}, "user_information": {"total_current_income": 60000, "current_spending": 25000, "current_amount_paying_in_taxes_annually": 12000, "retirement_age": 73, "year_range_running_model_on": {"start_age": 30, "end_age": 31}, "utility_of_expected_return": 0.3, "utility_of_std_dev": 0.3, "utility_of_total_cost": 0.3}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
HSA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_std_dev

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 0.0, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 0.0, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 0.223469394280114
  Upper bound: 0.223469394280114
  Number of objectives: 1
  Number of constraints: 32
  Number of variables: 15
  Number of nonzeros: 51
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.06966495513916016
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 0.223469394280114, 'Name': 'unknown', 'Number of constraints': 32, 'Number of nonzeros': 51, 'Number of objectives': 1, 'Number of variables': 15, 'Sense': 'maximize', 'Upper bound': 0.223469394280114}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.06966495513916016}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 0}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 3}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 4}, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 5}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 6}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 7}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 8}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 9}, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': {'dgalType': 'real?', 'index': 10}}, 'Voo': {'weight': {'dgalType': 'real?', 'index': 11}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 12}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 13}}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}, 'counts': {'real?': 13, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B2E0>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B350>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B3C0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B430>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B4A0>, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B510>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B660>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B6D0>, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B740>}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B7B0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B820>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B890>}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEBB1D90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC207F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC2A2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC1BA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBE0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEBEF380>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEB8F700>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF9165C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF8E9540>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEC0C180>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x00000163CEBD8160>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEC0C540>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEC0C240>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEC0C240>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC207F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC207F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC208E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20910>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC20970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC209D0>}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B2E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.012343266645229948, 'annualized_rate_of_return': 0.06531374589804684}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958910654438, 'annualized_rate_of_return': 0.11828601000377992}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B3C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184641156098667, 'annualized_rate_of_return': 0.030693314980101416}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922615868594, 'annualized_rate_of_return': 0.04439227810490887}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B4A0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CE6E0740>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF2B3C00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x00000163CF8F2610>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF2B38C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF2B3B80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF2B3B80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC2A2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A430>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3A0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC2A2E0>, 'yearlyContributionGreaterThanEqualZero': True, 'legalYearlyLimitsOnContributionSatisfied': True, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC2A430>], 'yearlyContributionWithInBudget': True}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.012343266702650605, 'annualized_rate_of_return': 0.0653137890035449}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589210655554, 'annualized_rate_of_return': 0.11828602295956459}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846444801637056, 'annualized_rate_of_return': 0.030693388211259665}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230602345818, 'annualized_rate_of_return': 0.04439229164476677}}, 'total_yearly_investment_contributions_to_account': 700, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CEBEFB80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF097DC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.ProductExpression object at 0x00000163CEC2A610>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF097B80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF097D00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000163CF097D00>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC1BA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBE0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAC0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000163CEC1BA00>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BAF0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB20>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBB0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000163CEC1BBE0>}}, 'account_asset_info': {'VTI': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.012343274976479933, 'annualized_rate_of_return': 0.06531368292201378}, 'Voo': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039587608113464, 'annualized_rate_of_return': 0.11828600017891322}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184631807600323, 'annualized_rate_of_return': 0.030693412889735372}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599228332583622, 'annualized_rate_of_return': 0.04439214581112627}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000163CEB9B6D0>, 'legal_limits_on_C_for_year_range': 3800}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'retirement_age': 73}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k", "HSA"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 0}}, "Voo": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}, "VXUS": {"weight": {"dgalType": "real?", "index": 3}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 4}, "current_balance_investment_account": 2000}}, "HSA": {"account_information": {"account_type": "HSA", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 5}}, "Voo": {"weight": {"dgalType": "real?", "index": 6}}, "BND": {"weight": {"dgalType": "real?", "index": 7}}, "VXUS": {"weight": {"dgalType": "real?", "index": 8}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 9}, "current_balance_investment_account": 3000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VTI": {"weight": {"dgalType": "real?", "index": 10}}, "Voo": {"weight": {"dgalType": "real?", "index": 11}}, "BND": {"weight": {"dgalType": "real?", "index": 12}}, "VXUS": {"weight": {"dgalType": "real?", "index": 13}}}, "total_yearly_investment_contribution": 700, "current_balance_investment_account": 4000}}}}, "user_information": {"total_current_income": 60000, "current_spending": 25000, "current_amount_paying_in_taxes_annually": 12000, "retirement_age": 73, "year_range_running_model_on": {"start_age": 30, "end_age": 31}, "utility_of_expected_return": 0.3, "utility_of_std_dev": 0.3, "utility_of_total_cost": 0.3}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
HSA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VTI

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
Voo

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_std_dev

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k', 'HSA'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 0.0, 'current_balance_investment_account': 2000}}, 'HSA': {'account_information': {'account_type': 'HSA', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 0.0, 'current_balance_investment_account': 3000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VTI': {'weight': 0.0}, 'Voo': {'weight': 0.5}, 'BND': {'weight': 0.5}, 'VXUS': {'weight': 0.0}}, 'total_yearly_investment_contribution': 700, 'current_balance_investment_account': 4000}}}}, 'user_information': {'total_current_income': 60000, 'current_spending': 25000, 'current_amount_paying_in_taxes_annually': 12000, 'retirement_age': 73, 'year_range_running_model_on': {'start_age': 30, 'end_age': 31}, 'utility_of_expected_return': 0.3, 'utility_of_std_dev': 0.3, 'utility_of_total_cost': 0.3}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 0.223469074611677
  Upper bound: 0.223469074611677
  Number of objectives: 1
  Number of constraints: 32
  Number of variables: 15
  Number of nonzeros: 51
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04127001762390137
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 0.223469074611677, 'Name': 'unknown', 'Number of constraints': 32, 'Number of nonzeros': 51, 'Number of objectives': 1, 'Number of variables': 15, 'Sense': 'maximize', 'Upper bound': 0.223469074611677}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04127001762390137}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC6C5C80>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793DD0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793E40>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793CF0>, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793C10>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793F90>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793AC0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793D60>, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC77BD90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811490>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC811400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC802B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8028B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802730>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC743E80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCF41BC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC7439C0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCEBF280>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC238A00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC78E8C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCD14580>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCD144C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC7EB140>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCD14800>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811490>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC811400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811580>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811490>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC811400>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114C0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8114F0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811550>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC811580>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC6C5C80>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588140618738, 'annualized_rate_of_return': 0.11828610750140856}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793DD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599225107964215, 'annualized_rate_of_return': 0.04439231914123254}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846376682234108, 'annualized_rate_of_return': 0.030693524861921118}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793CF0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC6D7040>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCFB1940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCDBC200>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCC74E1C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCDBC800>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018CCCDBCA40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC802B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8028B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802730>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802A60>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018CCC802B50>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC8028B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B80>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802B20>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018CCC802730>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958977259263, 'annualized_rate_of_return': 0.11828608418843367}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793F90>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599220834786927, 'annualized_rate_of_return': 0.0443922773631118}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793AC0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846453679771182, 'annualized_rate_of_return': 0.03069321996637142}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018CCC793D60>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B04A0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0510>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0580>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B05F0>, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0660>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B06D0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0740>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B07B0>, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B74520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B746A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7B9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA30>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B7B9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BB20>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917BE6100>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A916AAC1C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917BE6980>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917610140>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9175397C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917DAA3C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9176103C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917610180>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9175F4DC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9175F4D00>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B74520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B746A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B74520>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B745E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74610>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B74670>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B746A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B04A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959183586929, 'annualized_rate_of_return': 0.11828605788251267}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227065290322, 'annualized_rate_of_return': 0.04439220886201456}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846474266612806, 'annualized_rate_of_return': 0.030693419947562806}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B05F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A914F2CC80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917DDDEC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917891400>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917620780>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917891540>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917891880>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7B9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA30>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B7B9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BB20>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7B9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA30>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B7B9A0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA60>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BA90>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BAF0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B7BB20>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959099617738, 'annualized_rate_of_return': 0.11828606537379738}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B06D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599231706354117, 'annualized_rate_of_return': 0.04439231397471999}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B0740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846540917971535, 'annualized_rate_of_return': 0.03069338808858313}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A9175B07B0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80970>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B809E0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80A50>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80E40>, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80900>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80DD0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80D60>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80CF0>, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91768B130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EBB0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A91768B0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B28250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659400>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B28220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176592E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176593A0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917886640>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917868AC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917939300>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917886C40>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917906600>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A91793E940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917B334C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917B33380>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917B335C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917B332C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EBB0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A91768B0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EE20>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EBB0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A91768B0A0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E760>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E3D0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790E6A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A91790EE20>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80970>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588772132918, 'annualized_rate_of_return': 0.1182860647554218}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B809E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224829196378, 'annualized_rate_of_return': 0.04439223565779127}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80A50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184643195621027, 'annualized_rate_of_return': 0.030693522951461993}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80E40>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917652040>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917AEA840>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9179F70C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9179F7C40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A917868640>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A9179F7080>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B28250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659400>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B28220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176592E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176593A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917B28250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659400>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A917B28220>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659430>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176592E0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A917659370>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A9176593A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80900>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959272579594, 'annualized_rate_of_return': 0.11828593764594131}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80DD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599237124356827, 'annualized_rate_of_return': 0.04439227131839463}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.00318463765924655, 'annualized_rate_of_return': 0.030693457763952825}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A917B80CF0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F4A0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F510>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F580>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F5F0>, 'current_balance_investment_account': 500}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F660>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F6D0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F740>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F7B0>, 'current_balance_investment_account': 400}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173EFC5D040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C610>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F383C580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A90>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F3850A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B80>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F2DC5400>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F071FAC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173EF2F8FC0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F385C300>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F32D7080>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F3301580>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387BAC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F32ECB00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387BFC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387BB40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C610>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F383C580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C700>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C610>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F383C580>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C640>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C670>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C6D0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F383C700>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F4A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958541083322, 'annualized_rate_of_return': 0.11828605358940258}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159921921064433, 'annualized_rate_of_return': 0.044392400177853286}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184638769329838, 'annualized_rate_of_return': 0.030693476850852885}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F5F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F326FAC0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F399EF80>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387AD40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F385C100>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387A080>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000173F387AA80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A90>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F3850A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B80>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850A90>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000173F3850A00>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AC0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850AF0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B50>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000173F3850B80>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0110395918210117, 'annualized_rate_of_return': 0.11828611674932832}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922913269459, 'annualized_rate_of_return': 0.04439224609191039}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184640558505042, 'annualized_rate_of_return': 0.030693457960180526}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000173F327F7B0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'retirement_age': 69}}}}, 'user_information': {'total_current_income': 100, 'current_spending': 60, 'current_amount_paying_in_taxes_annually': 30, 'retirement_age': 69, 'year_range_running_model_on': {'start_age': 30, 'end_age': 69}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E5F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E6D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E7B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A350>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A3C0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A430>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A4A0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A900>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D518A3A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D1C820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D22640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D227C0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E14A80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D87BF8C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D627F7C0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8D39600>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D87B8E40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8D2C680>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8D2C500>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D880FCC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D87F8B00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D880FB00>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D1C820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C9A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D1C820>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C8E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C910>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C970>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D1C9A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039595414729113, 'annualized_rate_of_return': 0.11828596052193774}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224200355742, 'annualized_rate_of_return': 0.04439223569538253}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846373413768666, 'annualized_rate_of_return': 0.030693419885113205}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8D27700>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D88D6780>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D88D6700>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D88D9040>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8BF03C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8BF0EC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D22640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D227C0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D226D0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D22640>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22700>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22730>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D22790>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D227C0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039593329644616, 'annualized_rate_of_return': 0.11828599040876253}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224258563481, 'annualized_rate_of_return': 0.04439224775078032}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184637669687599, 'annualized_rate_of_return': 0.030693207662768618}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D878E820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970560.972373448
  Upper bound: 970560.972373448
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.054241180419921875
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970560.972373448, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970560.972373448}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.054241180419921875}]}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8B35190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D711F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D779D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B50>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8F0FB40>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8958B00>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D87C3840>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8F0F240>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8935E00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8908940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8908740>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E15340>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D88DA4C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E3B840>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D711F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71370>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71280>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D711F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D712E0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71340>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D71370>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589823958047, 'annualized_rate_of_return': 0.11828608116865924}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A3C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226745712374, 'annualized_rate_of_return': 0.04439221093818624}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.00318464487099764, 'annualized_rate_of_return': 0.03069339491747125}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D5C3D080>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A13080>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A13440>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8DF5E00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8DF5AC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8DF5400>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D779D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B50>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A60>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D8D779D0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77A90>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AC0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B20>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D77B50>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958243656, 'annualized_rate_of_return': 0.11828607849338302}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599228796647687, 'annualized_rate_of_return': 0.0443923015860932}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A4A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184640353651531, 'annualized_rate_of_return': 0.03069333221213233}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D881A900>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.107129769
  Upper bound: 970561.107129769
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05086565017700195
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.107129769, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.107129769}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.05086565017700195}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885890>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885AC0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885970>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885200>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885270>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D88850B0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885E40>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885350>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D8D79850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB580>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88DB4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B80>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88B4AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C70>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8B73740>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D806F1C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8B73940>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8B73980>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D89BF500>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8F4D940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8F4D480>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A57F40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A57280>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A57100>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB580>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88DB4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB670>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB580>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88DB4F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB5E0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB640>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88DB670>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592667531515, 'annualized_rate_of_return': 0.11828609038057647}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885AC0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599222990916978, 'annualized_rate_of_return': 0.044392296711900814}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885970>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184650975377834, 'annualized_rate_of_return': 0.03069346292110753}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885200>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E15500>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E00300>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8E00380>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8B79F00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D8A74740>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000172D89BF3C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B80>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88B4AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C70>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4B80>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000172D88B4AF0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BB0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4BE0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C40>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000172D88B4C70>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885270>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039594396684982, 'annualized_rate_of_return': 0.11828607129827318}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D88850B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226010141602, 'annualized_rate_of_return': 0.04439227651875677}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184634127261088, 'annualized_rate_of_return': 0.030693221427524175}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000172D8885350>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.042133105
  Upper bound: 970561.042133105
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.0478663444519043
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.042133105, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.042133105}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.0478663444519043}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE4A0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE510>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE580>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE5F0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE660>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE6D0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE740>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE7B0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDD8FA6E80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB42850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB55070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDD90339C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDC5F6040>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDA1121C0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDC62A8C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDBEB3680>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDC641740>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDC641D40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCB5C700>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCB5CC00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCB5CCC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB42850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB428E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB42850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB42970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB429D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE4A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592137401211, 'annualized_rate_of_return': 0.11828603617025668}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226458421114, 'annualized_rate_of_return': 0.044392241415472045}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184647790623805, 'annualized_rate_of_return': 0.03069325043782367}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE5F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDC4D40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDF4940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDF4180>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDF7E80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDF7940>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BDDCDF7A80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB55070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB550D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BDDCB55070>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB55190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BDDCB551F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591052926135, 'annualized_rate_of_return': 0.11828601287250895}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599231623205742, 'annualized_rate_of_return': 0.04439239114732296}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846406006115916, 'annualized_rate_of_return': 0.030693459920003496}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001BDDC5BE7B0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.130171113
  Upper bound: 970561.130171113
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.03458237648010254
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.130171113, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.130171113}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.03458237648010254}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BBA0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B120>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BC10>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B7B0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B190>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B3C0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BF20>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BD60>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A7B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A270>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23ACF0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A120>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A040>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23AA50>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A9E0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23AC10>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E22BFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD730>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2AD6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9490>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94C0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2C9430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C95B0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08EA3EA80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08D281400>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08B593780>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E2AB740>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E1B4580>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E519440>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E519840>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E7D4280>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E7D4580>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E7D4680>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD730>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2AD6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD820>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD730>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2AD6A0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD760>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD790>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD7F0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2AD820>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BBA0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959099066484, 'annualized_rate_of_return': 0.11828609184349803}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B120>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599231707068433, 'annualized_rate_of_return': 0.044392255451749074}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BC10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184651818811512, 'annualized_rate_of_return': 0.030693395868512052}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B7B0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E7D2D00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E2B42C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E2B4EC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08EA3F980>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E9A3BC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E9A6640>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9490>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94C0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2C9430>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C95B0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9460>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9490>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94C0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E2C9430>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C94F0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9520>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C9580>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E2C95B0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B190>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039594105802445, 'annualized_rate_of_return': 0.11828602252578646}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24B3C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599223335841645, 'annualized_rate_of_return': 0.0443923175120422}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BF20>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184649233619033, 'annualized_rate_of_return': 0.030693406929410916}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E24BD60>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.119251519
  Upper bound: 970561.119251519
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04587721824645996
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.119251519, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.119251519}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04587721824645996}]}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E7E2FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D550>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E86D4C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C10>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E873B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873D00>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E5470C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E4CC140>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E4CC1C0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E547780>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E594D40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E5EE800>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E5EE100>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E1EFE40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E24CBC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E24C480>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D550>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E86D4C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D640>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D550>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E86D4C0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D580>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5B0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D610>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E86D640>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039586244389802, 'annualized_rate_of_return': 0.11828607901329313}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A270>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922665848496, 'annualized_rate_of_return': 0.044392413742879056}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23ACF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184639456671255, 'annualized_rate_of_return': 0.030693334204459077}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A120>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E547BC0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E634C40>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E634600>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E4E4400>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E4E4180>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002B08E4E4780>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C10>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E873B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873D00>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C10>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002B08E873B80>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C40>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873C70>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873CD0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002B08E873D00>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A040>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959399483099, 'annualized_rate_of_return': 0.1182860793681404}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23AA50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230065893553, 'annualized_rate_of_return': 0.04439226540342678}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23A9E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846404346855587, 'annualized_rate_of_return': 0.03069339199623533}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002B08E23AC10>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.138809957
  Upper bound: 970561.138809957
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.09374856948852539
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.138809957, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.138809957}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.09374856948852539}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A3C0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A200>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A820>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8AE40>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8AF90>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A5F0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A4A0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A2E0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCC6BFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCD056D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCCEDEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF070>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE8780>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCF31A40>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFD203800>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFC7112C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCBF43C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCD7640>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCD70C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE8040>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE8E80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE8AC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCD056D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05850>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05760>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCD056D0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05790>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057C0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD057F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05820>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCD05850>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A3C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039585707572427, 'annualized_rate_of_return': 0.11828605264019743}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A200>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922686409594, 'annualized_rate_of_return': 0.044392234599609504}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846420714229666, 'annualized_rate_of_return': 0.030693499091254184}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8AE40>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCB90C40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE6EC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFCCE6280>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFD42DBC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFD42D500>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001CDFD42DFC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCCEDEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF070>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF40>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001CDFCCEDEB0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDF70>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFA0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCEDFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF040>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001CDFCCFF070>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8AF90>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591940041381, 'annualized_rate_of_return': 0.11828608425121678}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599229916846332, 'annualized_rate_of_return': 0.0443922277948714}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A4A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184648259650782, 'annualized_rate_of_return': 0.0306934755215158}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001CDFCC8A2E0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.202243499
  Upper bound: 970561.202243499
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.049106597900390625
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.202243499, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.202243499}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.049106597900390625}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834E40>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834CF0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834EB0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834C10>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834D60>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818A50>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818970>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818C80>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780DD5730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808AA6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6EE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808A6EB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894070>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267808857C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267808859C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267801CFFC0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267FE3065C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267FD395CC0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000026780B09340>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000026780B09880>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002678089A480>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002678083C740>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002678083C240>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808AA6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA850>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA760>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808AA6D0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA790>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7C0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA820>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808AA850>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039593677349155, 'annualized_rate_of_return': 0.11828601862972854}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834CF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230148220037, 'annualized_rate_of_return': 0.04439226939242635}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834EB0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846436495584236, 'annualized_rate_of_return': 0.03069332962916449}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834C10>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000267FC69EF00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002678105B440>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002678105BD00>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000026780887DC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000026780887780>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000026780887700>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6EE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808A6EB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894070>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6EE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F40>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000267808A6EB0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6F70>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FA0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000267808A6FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894040>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000026780894070>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780834D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039587346338007, 'annualized_rate_of_return': 0.11828604158071498}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818A50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599232138705411, 'annualized_rate_of_return': 0.0443922512856334}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818970>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184644911846653, 'annualized_rate_of_return': 0.030693427809790785}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000026780818C80>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.132753721
  Upper bound: 970561.132753721
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.043881893157958984
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.132753721, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.132753721}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.043881893157958984}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5F20>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5DD0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5BA0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5C80>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5D60>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5CF0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139C06C10>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000013139C06B30>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D5EA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D66250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663D0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000131396C2280>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139C9DB40>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139759040>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A1FB040>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139C18180>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A1FBA00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A1FB140>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A285EC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A285F00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A285480>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D5EA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EBB0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAC0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D5EA30>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EAF0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB20>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EB80>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D5EBB0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5F20>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039590782003082, 'annualized_rate_of_return': 0.11828608166616683}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5DD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230271425526, 'annualized_rate_of_return': 0.0443923196232503}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5BA0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846414906378153, 'annualized_rate_of_return': 0.030693473902924984}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5C80>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139C9D2C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A2749C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001313A2740C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139D5D640>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139D5D5C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000013139D5DD40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D66250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D662E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000013139D66250>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66310>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66340>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D66370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000013139D663D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592842557342, 'annualized_rate_of_return': 0.11828601694245888}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139CE5CF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922394950332, 'annualized_rate_of_return': 0.04439226619326986}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000013139C06C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846509869481302, 'annualized_rate_of_return': 0.030693311713066995}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000013139C06B30>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.063860997
  Upper bound: 970561.063860997
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.050069570541381836
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.063860997, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.063860997}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.050069570541381836}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFCF0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF0B0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF510>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFBA0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFA50>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF200>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF040>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B851F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B756D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8CEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D070>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856470DE40>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856524F580>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856450AD40>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564B0CDC0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564B7A1C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564DCB3C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564DCBAC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564B60EC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564DCB4C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564B41E40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75760>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B756D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75850>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75700>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75760>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B756D0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75790>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757C0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B757F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75820>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B75850>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFCF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039585816966938, 'annualized_rate_of_return': 0.11828596340212916}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF0B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224693960011, 'annualized_rate_of_return': 0.04439215816750197}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846443944161733, 'annualized_rate_of_return': 0.030693480373851667}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFBA0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564A20E80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856526EC00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856526EA80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856531D500>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856531D800>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001856531D480>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8CEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D070>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CEE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF40>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8CEB0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CF70>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFA0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8CFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D040>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B6D070>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFFA50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592396112626, 'annualized_rate_of_return': 0.11828605955537941}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF200>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599235381864614, 'annualized_rate_of_return': 0.04439227822702985}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF040>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846452401066276, 'annualized_rate_of_return': 0.030693384729611584}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018564AFF820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.124854193
  Upper bound: 970561.124854193
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.06164050102233887
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.124854193, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.124854193}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.06164050102233887}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.2038904852}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.1948201451}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.2038904852}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.1948201451}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08AC0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B084A0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08DD0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08200>, 'current_balance_investment_account': 384540.2038904852}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B083C0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08890>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08C80>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08B30>, 'current_balance_investment_account': 1409642.1948201451}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B2FA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CE80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEE0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B7CE50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C580>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C6A0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564F9A300>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564F9AEC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564F9A980>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564F9AB80>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564FBDA40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564C7D7C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564A58600>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564CC2300>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564CC2B80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564CC27C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CE80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEE0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B7CE50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFD0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CE80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CEE0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B7CE50>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF10>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF40>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFA0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B7CFD0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08AC0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958928212232, 'annualized_rate_of_return': 0.1182860410982347}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B084A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227669880145, 'annualized_rate_of_return': 0.04439222814473065}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08DD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184654066811852, 'annualized_rate_of_return': 0.03069332137104408}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08200>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564F9AE40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000185650D0140>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000185650D0E80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564C42780>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000185650D0940>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000018564BCF040>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C580>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C6A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C550>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C580>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C4F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C5E0>, 'ageLegalLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000018564B8C610>, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C640>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C670>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000018564B8C6A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B083C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039587683655497, 'annualized_rate_of_return': 0.11828611065669659}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599229189310488, 'annualized_rate_of_return': 0.044392294748688554}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08C80>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846443203135044, 'annualized_rate_of_return': 0.030693366508054876}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000018564B08B30>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 384540.2038904852}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 1409642.1948201451}}}}, "user_information": {"total_current_income": 38400.0, "current_spending": 85000, "current_amount_paying_in_taxes_annually": 250, "retirement_age": 60, "year_range_running_model_on": {"start_age": 60, "end_age": 80}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: -inf
  Upper bound: inf
  Number of objectives: 1
  Number of constraints: 21
  Number of variables: 9
  Number of nonzeros: 30
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: infeasible
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04239058494567871


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': -inf, 'Name': 'unknown', 'Number of constraints': 21, 'Number of nonzeros': 30, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': inf}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'infeasible', 'Time': 0.04239058494567871}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9350>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9AC0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A95F0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9430>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9C80>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9BA0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A96D0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53248CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C700>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53252C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CA0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B532513C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D90>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324B0980>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532C42200>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B531F17D00>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B53248F800>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5323E9700>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324AAE00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324AA500>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532A25500>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324AA300>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324AD780>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C700>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53252C670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C6D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C700>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53252C670>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C730>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C760>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53252C7F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588051522118, 'annualized_rate_of_return': 0.11828606871351499}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922056794605, 'annualized_rate_of_return': 0.044392290629176046}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9AC0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846408086108067, 'annualized_rate_of_return': 0.03069346524913974}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A95F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B53248FD40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532B31F80>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532B31C40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532C43300>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532C43A80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532C43600>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CA0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B532513C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D90>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CA0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B532513C10>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513CD0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D00>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D60>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B532513D90>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039595234351695, 'annualized_rate_of_return': 0.11828610156703845}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9C80>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599231656763635, 'annualized_rate_of_return': 0.044392304870719546}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A9BA0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846411208008743, 'annualized_rate_of_return': 0.03069333669011387}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B5324A96D0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40DD0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40510>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A407B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40120>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A400B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40E40>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40970>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40580>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.12800149
  Upper bound: 970561.12800149
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.03803515434265137
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.12800149, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.12800149}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.03803515434265137}]}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1F0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53251F160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4700>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B5328F4670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703180>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703840>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703940>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703740>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5326DA8C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B531D9B500>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5326DA0C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B5324AAF80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532B0DF80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532C92400>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1F0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53251F160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2E0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F1F0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B53251F160>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F220>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F250>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2B0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B53251F2E0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40DD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591791165145, 'annualized_rate_of_return': 0.11828605174503393}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599223554508598, 'annualized_rate_of_return': 0.04439229277758061}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A407B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184649024280956, 'annualized_rate_of_return': 0.030693510363780874}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40120>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B52E063B80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703200>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B532703D00>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B53274F500>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B53274FCC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001B53274F940>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4700>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B5328F4670>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4760>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F46D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4700>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001B5328F4670>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4730>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4760>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F4790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001B5328F47F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A400B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588683411712, 'annualized_rate_of_return': 0.11828602149336209}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922854986502, 'annualized_rate_of_return': 0.04439220298003099}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40970>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846472652996465, 'annualized_rate_of_return': 0.030693304064624893}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001B532A40580>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.062492953
  Upper bound: 970561.062492953
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04871940612792969
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.062492953, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.062492953}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04871940612792969}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645E40>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645EB0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645A50>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645CF0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645F20>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645C10>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B608120>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B6085F0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B62CF70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6B6820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B69A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6A7FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE190>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B6B7200>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B6B7380>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B588480>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B982BC0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B5FDD00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B696EC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B696DC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B0E9040>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BBE5EC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B64CD40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6B6820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B69A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6B6820>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B68E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6910>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B6970>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6B69A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592907417912, 'annualized_rate_of_return': 0.11828599113643379}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645EB0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226225847694, 'annualized_rate_of_return': 0.04439223430118622}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645A50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184644339739338, 'annualized_rate_of_return': 0.030693466129281033}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645CF0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B6B71C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BAACD40>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BAAC9C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BAACCC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC1380>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC1200>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6A7FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE190>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0A0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6A7FD0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE0D0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE100>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE160>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6AE190>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645F20>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589888025428, 'annualized_rate_of_return': 0.11828612342234046}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B645C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599220520520537, 'annualized_rate_of_return': 0.04439224944897502}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B608120>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184647171394442, 'annualized_rate_of_return': 0.030693455824626792}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B6085F0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.206843109
  Upper bound: 970561.206843109
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04487442970275879
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.206843109, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.206843109}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04487442970275879}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.6277922782}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.183178906}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.6277922782}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.183178906}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576E40>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576CF0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576D60>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E5F0>, 'current_balance_investment_account': 384540.6277922782}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63EDD0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E9E0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E660>, 'current_balance_investment_account': 1409642.183178906}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6A95B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6C81F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9388E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938940>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9388B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9389A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9389D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A60>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC1F00>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BAACDC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE182899C0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE17F409C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B0DF5C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B8BA640>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B8BAD00>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC19C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC16C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCC17C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6C81F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8370>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8280>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B6C81F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C82E0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8340>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B6C8370>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039590702571319, 'annualized_rate_of_return': 0.11828591605656658}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576CF0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230431566038, 'annualized_rate_of_return': 0.0443922020133638}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B576D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846411817592966, 'annualized_rate_of_return': 0.03069330110158286}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E5F0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B0DF640>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCBE500>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1BCBEF80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B8C8880>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B8C8580>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002CE1B8C83C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9388E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938940>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9388B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9389A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9389D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A60>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9388E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938940>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9388B0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938970>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B9389A0>, 'ageLegalLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002CE1B9389D0>, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A30>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002CE1B938A60>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63EDD0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039590145050017, 'annualized_rate_of_return': 0.11828601416477325}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599218847469044, 'annualized_rate_of_return': 0.04439232016503647}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E9E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184651107045126, 'annualized_rate_of_return': 0.030693531098221705}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002CE1B63E660>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 384540.6277922782}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 1409642.183178906}}}}, "user_information": {"total_current_income": 38400.0, "current_spending": 85000, "current_amount_paying_in_taxes_annually": 250, "retirement_age": 60, "year_range_running_model_on": {"start_age": 60, "end_age": 80}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: -inf
  Upper bound: inf
  Number of objectives: 1
  Number of constraints: 21
  Number of variables: 9
  Number of nonzeros: 30
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: infeasible
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05522966384887695


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': -inf, 'Name': 'unknown', 'Number of constraints': 21, 'Number of nonzeros': 30, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': inf}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'infeasible', 'Time': 0.05522966384887695}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5C80>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5D60>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5E40>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5CF0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5A50>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5C10>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54687120>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546875F0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F546C8910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54749A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54747FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732190>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54634540>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5467DE80>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5409A280>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54D70C40>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F51F28080>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54EADEC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54EADC80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5472D500>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5472AE40>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5472A700>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54749A30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749BB0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AC0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54749A30>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749AF0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B20>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749B80>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54749BB0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5C80>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039585500456339, 'annualized_rate_of_return': 0.11828606019130561}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5D60>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599229958200761, 'annualized_rate_of_return': 0.044392248394391265}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5E40>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846445340995583, 'annualized_rate_of_return': 0.030693442032135643}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5CF0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F546F8100>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54C72600>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F5472DC80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F546E6D40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F546E6940>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F546E61C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320A0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54747FD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732190>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320A0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F54747FD0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547320D0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732100>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732160>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54732190>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5A50>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039585767127337, 'annualized_rate_of_return': 0.11828602448875691}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546C5C10>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599225858792653, 'annualized_rate_of_return': 0.044392369248654306}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54687120>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846453050753797, 'annualized_rate_of_return': 0.030693362789049994}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024F546875F0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.095033442
  Upper bound: 970561.095033442
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.038901567459106445
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.095033442, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.095033442}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.038901567459106445}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.9624832548}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409646.3941632994}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.9624832548}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409646.3941632994}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726900>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726660>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F547269E0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726AC0>, 'current_balance_investment_account': 384540.9624832548}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726200>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726350>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726510>, 'current_balance_investment_account': 1409646.3941632994}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F546860D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F547361F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1910>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C1880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1970>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C19A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C19D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A30>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54272100>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F51678040>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F545F8E80>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54B391C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54609F80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54D80180>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54D80440>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54C49F00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54BA6300>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54C49D40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736280>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F547361F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736370>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736280>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F547361F0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362B0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F547362E0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736340>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F54736370>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726900>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039594559972684, 'annualized_rate_of_return': 0.1182859800942615}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226795803958, 'annualized_rate_of_return': 0.04439216534084789}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F547269E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184645739334107, 'annualized_rate_of_return': 0.03069336841001591}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726AC0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F545F8E40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54B39400>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F54B394C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F548CDA40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F548CD9C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024F548CD280>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1910>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C1880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1970>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C19A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C19D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A30>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C18E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1910>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C1880>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1940>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1970>, 'ageLegalLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024F549C19A0>, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C19D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A00>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024F549C1A30>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726200>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039586181261293, 'annualized_rate_of_return': 0.11828602575439962}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599229089965338, 'annualized_rate_of_return': 0.044392209618443035}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846427645138473, 'annualized_rate_of_return': 0.030693424370938027}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024F54726510>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 384540.9624832548}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 1409646.3941632994}}}}, "user_information": {"total_current_income": 38400.0, "current_spending": 85000, "current_amount_paying_in_taxes_annually": 250, "retirement_age": 60, "year_range_running_model_on": {"start_age": 60, "end_age": 80}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: -inf
  Upper bound: inf
  Number of objectives: 1
  Number of constraints: 21
  Number of variables: 9
  Number of nonzeros: 30
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: infeasible
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05274200439453125


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': -inf, 'Name': 'unknown', 'Number of constraints': 21, 'Number of nonzeros': 30, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': inf}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'infeasible', 'Time': 0.05274200439453125}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E660>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E6D0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E740>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E7B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E820>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E890>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E900>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4660>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB45F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4430>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4900>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4970>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB49E0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4A50>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0D9BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D10DA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC550>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0FC4C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC640>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D0C6B80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D0C6340>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1C40F480>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D2F4B00>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CAFBE00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB71680>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB71280>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CBB1B00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB63C80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB63D80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAC0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D10DA30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DBB0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DA90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAC0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D10DA30>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DAF0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB20>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DB80>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DBB0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589215927542, 'annualized_rate_of_return': 0.11828602093826901}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227429598959, 'annualized_rate_of_return': 0.044392230305980496}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184645401665721, 'annualized_rate_of_return': 0.030693052738266058}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E740>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CBB1080>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D1D8B40>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D1D88C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D11B440>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D11B1C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D11B380>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC550>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0FC4C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC610>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC640>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC4F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC520>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC550>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0FC4C0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC580>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5B0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC5E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC610>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0FC640>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592261462892, 'annualized_rate_of_return': 0.11828604536576193}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599229185122998, 'annualized_rate_of_return': 0.04439219266500438}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184652967099142, 'annualized_rate_of_return': 0.030693205017673142}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CB2E900>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970560.980755801
  Upper bound: 970560.980755801
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.10582661628723145
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970560.980755801, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970560.980755801}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.10582661628723145}]}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D10DCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8310>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0A8280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4820>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0B4790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4910>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB98F80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CB99B40>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CBB1380>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D1D8880>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D1DA240>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D144740>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D144680>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CE5BB40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CE5B880>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CE5BF00>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8310>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0A8280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8400>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A82E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8310>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0A8280>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8340>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8370>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A83D0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0A8400>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588191837696, 'annualized_rate_of_return': 0.11828603716867092}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599230093457983, 'annualized_rate_of_return': 0.044392299135950886}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB45F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184646945869497, 'annualized_rate_of_return': 0.030693533300439668}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4430>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D11BB80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CD808C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CD80280>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CE13680>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1D42EEC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000028A1CF4C7C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4820>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0B4790>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4910>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B47F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4820>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000028A1D0B4790>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4850>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4880>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B48E0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000028A1D0B4910>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4900>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592797110217, 'annualized_rate_of_return': 0.11828600633141084}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4970>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922545659517, 'annualized_rate_of_return': 0.044392261353460416}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB49E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184648398595505, 'annualized_rate_of_return': 0.030693433078627708}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000028A1CBB4A50>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.131431206
  Upper bound: 970561.131431206
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.0608363151550293
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.131431206, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.131431206}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.0608363151550293}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E660>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E6D0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E740>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E7B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E820>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E890>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E900>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F77D48E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AF0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D49A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D3F040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F1C0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77917C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7D05780>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F75E9F80>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77559C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77312C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7F85540>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7F85C00>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77CEC80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7F631C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7F635C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AF0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D49A60>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B50>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BE0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49A90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49AF0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D49A60>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B20>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B50>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BB0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D49BE0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591405783413, 'annualized_rate_of_return': 0.1182860213777186}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599231267122844, 'annualized_rate_of_return': 0.044392273591945974}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846479717612185, 'annualized_rate_of_return': 0.03069340053638281}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E740>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7CFF440>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F80A7FC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F80A7A40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77978C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F77CB4C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002C4F7F66180>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D3F040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F1C0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F0D0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002C4F7D3F040>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F100>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F130>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F190>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002C4F7D3F1C0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039590227372949, 'annualized_rate_of_return': 0.11828606641551631}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599232025112613, 'annualized_rate_of_return': 0.044392255451648266}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846414013922434, 'annualized_rate_of_return': 0.030693560223445493}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002C4F775E900>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.232626935
  Upper bound: 970561.232626935
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05451059341430664
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.232626935, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.232626935}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.05451059341430664}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E5F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E6D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E7B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A347DAE100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E1F850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E38070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348FC80C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A3488BDFC0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348822D80>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348887880>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348841A40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348DE8800>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348DE8740>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A3488D3F00>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A3488D3BC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A3488D3040>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E1F850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F8E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E1F850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E1F9D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591382893897, 'annualized_rate_of_return': 0.11828603201811139}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224225538888, 'annualized_rate_of_return': 0.04439221579779273}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846393844279417, 'annualized_rate_of_return': 0.03069344767536153}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A34887EF00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A349196800>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A349196C40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A349192980>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348891700>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001A348891480>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E38070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E380D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001A348E38070>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E38190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001A348E381F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039594255637695, 'annualized_rate_of_return': 0.11828597928259277}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599225305524041, 'annualized_rate_of_return': 0.0443922866603943}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184637810539621, 'annualized_rate_of_return': 0.030693344798714106}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001A34884E820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.055425795
  Upper bound: 970561.055425795
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.060808658599853516
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.055425795, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.055425795}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.060808658599853516}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF05F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF06D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF07B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024166EC8EE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674C9850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674ADCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE50>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241643D54C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166A5FD40>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166EFA040>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166ECFD00>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166466E00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166F4D880>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166F4D200>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167485780>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241674851C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241674855C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674C9850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C98E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674C9850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C9970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674C99D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591686230503, 'annualized_rate_of_return': 0.11828601133486227}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01159922737471026, 'annualized_rate_of_return': 0.04439229306218384}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF05F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846408687899804, 'annualized_rate_of_return': 0.03069356216449126}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024166F2DD80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241675CFD40>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241675CFB80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167656300>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241676567C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167656DC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD60>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674ADCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD90>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDC0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE20>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE50>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD60>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x00000241674ADCD0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADD90>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDC0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADDF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE20>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000241674ADE50>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF06D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589237277363, 'annualized_rate_of_return': 0.11828609103057341}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226043473422, 'annualized_rate_of_return': 0.04439234345339904}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF07B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846505386070806, 'annualized_rate_of_return': 0.030693323267109385}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024166EF0820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.116591061
  Upper bound: 970561.116591061
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.1575791835784912
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.116591061, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.116591061}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.1575791835784912}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4190>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4200>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4270>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F42E0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4350>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F43C0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4430>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F44A0>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024166EF2580>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024167471BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F1F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F250>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002416746F1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F340>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241677F4580>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241676168C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024164004080>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241677F4B80>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167281BC0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241677B79C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241677B7400>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241671DA140>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241671DAFC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241671DA780>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024167471BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D30>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C40>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024167471BB0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471C70>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CA0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D00>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024167471D30>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4190>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039587506224345, 'annualized_rate_of_return': 0.11828608786965322}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4200>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226606427596, 'annualized_rate_of_return': 0.0443922419168592}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4270>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184646496079647, 'annualized_rate_of_return': 0.030693354129386563}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F42E0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241677F4080>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167047800>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241670472C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000241675747C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167047440>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024167653240>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F1F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F250>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002416746F1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F340>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F1F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F220>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F250>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002416746F1C0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F280>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2B0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F2E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F310>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002416746F340>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589523044045, 'annualized_rate_of_return': 0.11828606698286603}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F43C0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224555560096, 'annualized_rate_of_return': 0.04439231243148223}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F4430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184655583538068, 'annualized_rate_of_return': 0.030693479823816316}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x00000241671F44A0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.186233938
  Upper bound: 970561.186233938
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05858039855957031
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.186233938, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.186233938}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.05858039855957031}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF5F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF6D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF7B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018520E100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002018622E850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000020186241070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185CDE840>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185CDED80>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020183C98080>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185D31E80>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020183C982C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185D05C40>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000201864B2FC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185D1B840>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020185D31D40>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000201864B45C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002018622E850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E8E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002018622E850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002018622E9D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103958952179714, 'annualized_rate_of_return': 0.1182860707890967}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227004102175, 'annualized_rate_of_return': 0.04439224509759776}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846364030643248, 'annualized_rate_of_return': 0.030693335683642964}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000201833BB200>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002018626D2C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002018626D3C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002018623ACC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002018623AD00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002018623AC80>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000020186241070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862410D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000020186241070>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000020186241190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x00000201862411F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039593312000131, 'annualized_rate_of_return': 0.1182860478713279}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227696968896, 'annualized_rate_of_return': 0.04439226271196328}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846464273630596, 'annualized_rate_of_return': 0.030693456634184546}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000020185CAF820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.158188763
  Upper bound: 970561.158188763
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.19185662269592285
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.158188763, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.158188763}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.19185662269592285}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E5F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E6D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E7B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CE2F100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB5850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB4070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CEFC340>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075C930380>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CEFCE00>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075C96DF00>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000020755F9D640>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075C9AEA00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D105540>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CEDD440>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CEDD680>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CEDD2C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB5850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB58E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB5850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB5970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB59D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0110395912132923, 'annualized_rate_of_return': 0.11828600777301101}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599220126560051, 'annualized_rate_of_return': 0.04439231911612662}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184654576516297, 'annualized_rate_of_return': 0.03069315313057519}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075C486540>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CC40900>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CC408C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D104300>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D104080>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D104AC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB4070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB40D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CEB4070>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB4190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CEB41F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039593055032371, 'annualized_rate_of_return': 0.11828603934659565}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224293462614, 'annualized_rate_of_return': 0.044392426401715035}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846497340105684, 'annualized_rate_of_return': 0.030693362835431115}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002075C93E820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.078376985
  Upper bound: 970561.078376985
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.041886091232299805
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.078376985, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.078376985}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.041886091232299805}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.09165683226}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.5423672474}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.09165683226}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409642.5423672474}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB502E0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50270>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50350>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB503C0>, 'current_balance_investment_account': 384540.09165683226}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50430>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB504A0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50510>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50580>, 'current_balance_investment_account': 1409642.5423672474}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075C9B3730>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C10>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF07B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18340>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18400>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB64B80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CBCD380>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB64540>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB64680>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB46F00>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D030480>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075D030540>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CCEB800>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CCEB280>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CCEB9C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C10>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF07B80>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C40>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07D00>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07BE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C10>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF07B80>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C40>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07C70>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07CD0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF07D00>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB502E0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039587467496727, 'annualized_rate_of_return': 0.11828611221678131}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50270>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226729779541, 'annualized_rate_of_return': 0.044392243173425605}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184634040933703, 'annualized_rate_of_return': 0.030693207293658764}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB503C0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB64900>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CBCD480>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CBCDD40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB69280>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB692C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000002075CB69C00>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18250>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18310>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18340>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18370>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18400>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF182E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18250>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18310>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18340>, 'ageLegalLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000002075CF18370>, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF183D0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002075CF18400>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039586983609294, 'annualized_rate_of_return': 0.11828612157389395}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB504A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599225652904537, 'annualized_rate_of_return': 0.044392275992969354}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184647840971423, 'annualized_rate_of_return': 0.030693475799498326}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002075CB50580>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 384540.09165683226}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 1409642.5423672474}}}}, "user_information": {"total_current_income": 38400.0, "current_spending": 85000, "current_amount_paying_in_taxes_annually": 250, "retirement_age": 60, "year_range_running_model_on": {"start_age": 60, "end_age": 80}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: -inf
  Upper bound: inf
  Number of objectives: 1
  Number of constraints: 21
  Number of variables: 9
  Number of nonzeros: 30
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: infeasible
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05713081359863281


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': -inf, 'Name': 'unknown', 'Number of constraints': 21, 'Number of nonzeros': 30, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': inf}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'infeasible', 'Time': 0.05713081359863281}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F510>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F580>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F5F0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F660>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F6D0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F740>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F7B0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F820>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000002372428F100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F26850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F1B070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1F0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000237242E05C0>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000237232A09C0>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023721983EC0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723A22FC0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023720354700>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023724162E00>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023724162BC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723F3FD80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723F3FDC0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723F3FB40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268E0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F26850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269D0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F268E0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F26850>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26910>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26940>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F26970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269A0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F269D0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F510>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039583926829829, 'annualized_rate_of_return': 0.11828601078848267}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599228745085257, 'annualized_rate_of_return': 0.044392190779973584}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846406952164706, 'annualized_rate_of_return': 0.03069349147314071}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F660>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723A22840>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723FC7880>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023723FC7BC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000237240D4FC0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000237240D28C0>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000237240D2580>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B100>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F1B070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1F0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B100>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023723F1B070>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B130>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B160>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1C0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023723F1B1F0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039597277436301, 'annualized_rate_of_return': 0.1182860608114451}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224553062623, 'annualized_rate_of_return': 0.04439230203560185}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184644834828862, 'annualized_rate_of_return': 0.030693378976986763}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000002372399F820>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.126542681
  Upper bound: 970561.126542681
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.05177116394042969
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.126542681, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.126542681}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.05177116394042969}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E580>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E5F0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E660>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E6D0>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E740>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E7B0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E820>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E890>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824A84DF0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F910>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F9F880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9FA00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E130>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F8E0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E220>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024825218B80>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024825217F00>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A7DE00>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000248227AEE40>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824FAFCC0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024825219EC0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000248252199C0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A960C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A96900>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A96380>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F910>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F9F880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9FA00>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F8E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F910>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F9F880>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F940>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F970>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9F9D0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F9FA00>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588810326203, 'annualized_rate_of_return': 0.11828610106556114}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599223410157232, 'annualized_rate_of_return': 0.044392205174732524}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184637473675785, 'annualized_rate_of_return': 0.030693586910384818}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E6D0>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A462C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824CD1B80>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824CD1840>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824F82B80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824F82E80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824F82F40>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E130>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F8E0A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1F0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E220>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E0D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E130>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824F8E0A0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E160>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E190>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1C0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E1F0>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F8E220>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E740>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589363913914, 'annualized_rate_of_return': 0.11828611948918555}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224462593512, 'annualized_rate_of_return': 0.04439230946319861}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846463669028525, 'annualized_rate_of_return': 0.03069336953398283}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024824A0E890>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.170012097
  Upper bound: 970561.170012097
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04886960983276367
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.170012097, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.170012097}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04886960983276367}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.3725272058}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409644.7346308555}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 384540.3725272058}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 1409644.7346308555}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23350>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23430>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D234A0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23510>, 'current_balance_investment_account': 384540.3725272058}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23580>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D235F0>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23660>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D236D0>, 'current_balance_investment_account': 1409644.7346308555}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824F92D00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFBE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FEFBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD30>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0310>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF0280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0370>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF03A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF03D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0430>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824D35680>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024821EF5480>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824D35D40>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824D35C00>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824D0ED40>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024825158280>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024825158300>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824E42500>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824E42200>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824E42140>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFBE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC40>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FEFBB0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC70>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCA0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD00>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD30>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFBE0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC10>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC40>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FEFBB0>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFC70>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCA0>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFCD0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD00>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FEFD30>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23350>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039588972003984, 'annualized_rate_of_return': 0.11828604919572738}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23430>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599227918061426, 'annualized_rate_of_return': 0.04439225295142024}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D234A0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184638988642716, 'annualized_rate_of_return': 0.030693569550586552}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23510>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824D35500>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A7D240>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000024824A7DEC0>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000248251C5280>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000248251C5E00>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x00000248251C5EC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0310>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF0280>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0340>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0370>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF03A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF03D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0400>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0430>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02B0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF02E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0310>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF0280>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0340>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0370>, 'ageLegalLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000024824FF03A0>, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF03D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0400>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000024824FF0430>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23580>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039589168698564, 'annualized_rate_of_return': 0.11828600140002421}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D235F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224903045746, 'annualized_rate_of_return': 0.044392309568263455}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D23660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846492710003293, 'annualized_rate_of_return': 0.030693597974000397}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000024824D236D0>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 38400.0, 'current_spending': 85000, 'current_amount_paying_in_taxes_annually': 250, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 60, 'end_age': 80}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 384540.3725272058}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 1409644.7346308555}}}}, "user_information": {"total_current_income": 38400.0, "current_spending": 85000, "current_amount_paying_in_taxes_annually": 250, "retirement_age": 60, "year_range_running_model_on": {"start_age": 60, "end_age": 80}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: -inf
  Upper bound: inf
  Number of objectives: 1
  Number of constraints: 21
  Number of variables: 9
  Number of nonzeros: 30
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: infeasible
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.048868417739868164


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': -inf, 'Name': 'unknown', 'Number of constraints': 21, 'Number of nonzeros': 30, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': inf}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'infeasible', 'Time': 0.048868417739868164}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD660>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD6D0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD740>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD7B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD820>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD890>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD900>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C423D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C48820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C489A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C46040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C461C0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77743F00>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77DEF240>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77743FC0>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB776F54C0>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB76F9F440>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77E840C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77E87B80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77718200>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77C5AD80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77C5A1C0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C48820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C489A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C48820>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C488E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48910>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C48970>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C489A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592061614057, 'annualized_rate_of_return': 0.11828597446574718}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599225293587347, 'annualized_rate_of_return': 0.04439232499149459}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.0031846432841579108, 'annualized_rate_of_return': 0.030693338197911757}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD740>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB776F58C0>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB779BD3C0>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB779BDD40>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB78021D80>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77970680>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x000001BB77970780>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C46040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C461C0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C460D0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x000001BB77C46040>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46100>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46130>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C46190>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x000001BB77C461C0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039592736640288, 'annualized_rate_of_return': 0.11828602226127494}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599228568404295, 'annualized_rate_of_return': 0.044392242441064544}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184644511480901, 'annualized_rate_of_return': 0.0306935433909572}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x000001BB776BD900>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970561.187841114
  Upper bound: 970561.187841114
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.04852104187011719
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970561.187841114, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970561.187841114}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.04852104187011719}]}

DEBUG: enumInput in py:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: enumInputAndCounts_before_create_Pyomo_model:
{'enumInput': {'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 0}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 1}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 2}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 3}, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': {'dgalType': 'real?', 'index': 4}}, 'VXUS': {'weight': {'dgalType': 'real?', 'index': 5}}, 'BND': {'weight': {'dgalType': 'real?', 'index': 6}}}, 'total_yearly_investment_contribution': {'dgalType': 'real?', 'index': 7}, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}, 'counts': {'real?': 7, 'int?': -1}}

DEBUG: input w Pyomo vars:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D5F0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D660>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D6D0>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D740>, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D7B0>}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D820>}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D890>}}, 'total_yearly_investment_contribution': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D900>, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: output of dgalModel:
{'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDCB3D0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDC1820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC19A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDD7040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD71C0>], 'total_balance_from_all_investments_at_end_of_year_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4BE17500>, 'total_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B80BB80>, 'total_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F495E2200>, 'total_growth_of_all_accounts': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B88EE40>, 'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_outputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B6D0C80>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B886700>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B886480>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4B88EF40>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4BDEAC80>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4C058AC0>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18B0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDC1820>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18E0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1910>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1970>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC19A0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1850>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1880>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18B0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDC1820>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC18E0>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1910>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1940>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC1970>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDC19A0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D5F0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.01103959285211746, 'annualized_rate_of_return': 0.11828595171324685}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D660>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599226760091976, 'annualized_rate_of_return': 0.04439227538008428}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D6D0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184640765779927, 'annualized_rate_of_return': 0.03069328545631289}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D740>, 'legal_limits_on_C_for_year_range': 6500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}, '401k': {'account_information': {'account_type': '401k', 'account_expected_return': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F46A91180>, 'account_variance': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4BB01940>, 'total_growth_of_account_over_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4BEB6E80>, 'total_account_balance_at_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4C18F5C0>, 'total_cost_incurred_on_account_by_end_of_range': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4C191140>, 'total_yearly_cost_on_account': <pyomo.core.expr.numeric_expr.SumExpression object at 0x0000023F4BDD1280>, 'constraints': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70D0>, <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDD7040>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7100>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7130>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7190>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD71C0>], 'debug': {'constraintbreakdown': {'allAssetWeightsGreaterThanEqualZero': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7070>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70A0>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD70D0>], 'assetWeightsSumToOne': <pyomo.core.expr.logical_expr.EqualityExpression object at 0x0000023F4BDD7040>, 'yearlyContributionGreaterThanEqualZero': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7100>, 'legalYearlyLimitsOnContributionSatisfied': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7130>, 'ageLegalLimitsOnContributionSatisfied': True, 'allocateMoreAccordingToTraits': [<pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7160>, <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD7190>], 'yearlyContributionWithInBudget': <pyomo.core.expr.logical_expr.InequalityExpression object at 0x0000023F4BDD71C0>}}, 'account_asset_info': {'VOO': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D7B0>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011039591242997986, 'annualized_rate_of_return': 0.11828601294185326}, 'VXUS': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D820>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.011599224600150533, 'annualized_rate_of_return': 0.04439229438515668}, 'BND': {'weight': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D890>, 'dateOfInception': 'needToGETFromDB', 'expense_ratio': 0.03, 'std_dev_since_inception': 0.003184652908290401, 'annualized_rate_of_return': 0.030693240275638134}}, 'total_yearly_investment_contributions_to_account': <pyomo.core.base.var._GeneralVarData object at 0x0000023F4B83D900>, 'legal_limits_on_C_for_year_range': 22500}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'retirement_age': 60}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomoModel before return:
unknown

DEBUG: enumInput before solving:
{"account_information": {"account_type": "combined", "subAccounts": ["IRA", "401k"], "sub_account_inputs": {"IRA": {"account_information": {"account_type": "IRA", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 0}}, "VXUS": {"weight": {"dgalType": "real?", "index": 1}}, "BND": {"weight": {"dgalType": "real?", "index": 2}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 3}, "current_balance_investment_account": 5000}}, "401k": {"account_information": {"account_type": "401k", "account_asset_info": {"VOO": {"weight": {"dgalType": "real?", "index": 4}}, "VXUS": {"weight": {"dgalType": "real?", "index": 5}}, "BND": {"weight": {"dgalType": "real?", "index": 6}}}, "total_yearly_investment_contribution": {"dgalType": "real?", "index": 7}, "current_balance_investment_account": 40000}}}}, "user_information": {"total_current_income": 100000, "current_spending": 60000, "current_amount_paying_in_taxes_annually": 3000, "retirement_age": 60, "year_range_running_model_on": {"start_age": 30, "end_age": 60}, "utility_of_expected_return": "TBD", "utility_of_volatility": "TBD", "utility_of_total_cost": "TBD"}}

DEBUG: solver::
glpk

DEBUG: model after solve::
unknown

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
subAccounts

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
sub_account_inputs

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
IRA

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
401k

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_type

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
account_asset_info

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
VOO

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
VXUS

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
BND

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
weight

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
total_yearly_investment_contribution

DEBUG: dgType_in_dgalOptResult:
real?

DEBUG: passed real? or int? test in dgalOptResult:
real?

DEBUG: key in enumInput::
current_balance_investment_account

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
user_information

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
total_current_income

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_spending

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
current_amount_paying_in_taxes_annually

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
retirement_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
year_range_running_model_on

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
start_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
end_age

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_expected_return

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_volatility

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: key in enumInput::
utility_of_total_cost

DEBUG: dgType_in_dgalOptResult:
none

DEBUG: optAnswer before dgalOptResult return:
{'account_information': {'account_type': 'combined', 'subAccounts': ['IRA', '401k'], 'sub_account_inputs': {'IRA': {'account_information': {'account_type': 'IRA', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 6500.0, 'current_balance_investment_account': 5000}}, '401k': {'account_information': {'account_type': '401k', 'account_asset_info': {'VOO': {'weight': 0.5}, 'VXUS': {'weight': 0.0}, 'BND': {'weight': 0.5}}, 'total_yearly_investment_contribution': 22500.0, 'current_balance_investment_account': 40000}}}}, 'user_information': {'total_current_income': 100000, 'current_spending': 60000, 'current_amount_paying_in_taxes_annually': 3000, 'retirement_age': 60, 'year_range_running_model_on': {'start_age': 30, 'end_age': 60}, 'utility_of_expected_return': 'TBD', 'utility_of_volatility': 'TBD', 'utility_of_total_cost': 'TBD'}}

DEBUG: pyomo results::

Problem: 
- Name: unknown
  Lower bound: 970560.994718212
  Upper bound: 970560.994718212
  Number of objectives: 1
  Number of constraints: 20
  Number of variables: 9
  Number of nonzeros: 29
  Sense: maximize
Solver: 
- Status: ok
  Termination condition: optimal
  Statistics: 
    Branch and bound: 
      Number of bounded subproblems: 0
      Number of created subproblems: 0
  Error rc: 0
  Time: 0.18112516403198242
Solution: 
- number of solutions: 0
  number of solutions displayed: 0


DEBUG: dictPyomoResult read from results file:
{'Problem': [{'Lower bound': 970560.994718212, 'Name': 'unknown', 'Number of constraints': 20, 'Number of nonzeros': 29, 'Number of objectives': 1, 'Number of variables': 9, 'Sense': 'maximize', 'Upper bound': 970560.994718212}], 'Solution': [{'number of solutions': 0, 'number of solutions displayed': 0}], 'Solver': [{'Error rc': 0, 'Statistics': {'Branch and bound': {'Number of bounded subproblems': 0, 'Number of created subproblems': 0}}, 'Status': 'ok', 'Termination condition': 'optimal', 'Time': 0.18112516403198242}]}